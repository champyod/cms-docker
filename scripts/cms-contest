#!/bin/bash

# ===================================
# CMS Contest Management CLI Tool
# ===================================
# Easy commands for managing contests in Docker deployment

script_dir=$(dirname "$(readlink -f "$0")")
source "${script_dir}/contest-manager.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Show help
show_help() {
    echo "CMS Contest Management Tool"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  status              Show current contest status and selection"
    echo "  list                List all contests with details"
    echo "  select <id>         Select specific contest by ID"
    echo "  select auto         Enable auto-discovery mode"
    echo "  select manual       Enable manual selection mode"
    echo "  current             Show currently selected contest"
    echo "  refresh             Refresh contest selection"
    echo "  monitor             Start contest monitoring (foreground)"
    echo "  logs                Show contest manager logs"
    echo ""
    echo "Examples:"
    echo "  $0 status           # Show current status"
    echo "  $0 list             # List all contests"
    echo "  $0 select 2         # Select contest ID 2"
    echo "  $0 select auto      # Enable auto-discovery"
    echo "  $0 refresh          # Refresh selection"
}

# Show current contest status
cmd_status() {
    print_color $BLUE "=== CMS Contest Status ==="
    show_contest_info
}

# List all contests with formatted output
cmd_list() {
    local contests
    local count
    
    count=$(get_contest_count)
    print_color $BLUE "=== Contest List (Total: $count) ==="
    
    if [ "$count" -eq 0 ]; then
        print_color $YELLOW "No contests found in database."
        return
    fi
    
    printf "%-4s %-30s %-20s %-10s\n" "ID" "Name" "Start" "Status"
    printf "%-4s %-30s %-20s %-10s\n" "----" "------------------------------" "--------------------" "----------"
    
    get_all_contests | while IFS='|' read -r id name start stop status; do
        # Clean up whitespace
        id=$(echo "$id" | tr -d ' ')
        name=$(echo "$name" | sed 's/^[ \t]*//;s/[ \t]*$//' | cut -c1-30)
        start=$(echo "$start" | sed 's/^[ \t]*//;s/[ \t]*$//' | cut -c1-20)
        status=$(echo "$status" | tr -d ' ')
        
        # Color code status
        case "$status" in
            "active")   status_color=$GREEN ;;
            "upcoming") status_color=$YELLOW ;;
            "finished") status_color=$RED ;;
            *)          status_color=$NC ;;
        esac
        
        printf "%-4s %-30s %-20s " "$id" "$name" "$start"
        print_color $status_color "$status"
    done
}

# Show currently selected contest
cmd_current() {
    local current_id
    
    if [ -f "/tmp/cms_current_contest_id" ]; then
        current_id=$(cat /tmp/cms_current_contest_id)
        print_color $GREEN "Currently selected contest ID: $current_id"
        
        # Show contest details
        local contest_info
        contest_info=$(get_contest_by_id "$current_id")
        if [ -n "$contest_info" ]; then
            echo "$contest_info" | while IFS='|' read -r id name status; do
                name=$(echo "$name" | sed 's/^[ \t]*//;s/[ \t]*$//')
                status=$(echo "$status" | tr -d ' ')
                print_color $BLUE "Name: $name"
                print_color $BLUE "Status: $status"
            done
        fi
    else
        print_color $YELLOW "No contest currently selected or monitoring not active."
    fi
}

# Select contest
cmd_select() {
    local target="$1"
    
    if [ -z "$target" ]; then
        print_color $RED "Error: Please specify contest ID, 'auto', or 'manual'"
        echo "Usage: $0 select <id|auto|manual>"
        return 1
    fi
    
    case "$target" in
        "auto")
            print_color $BLUE "Enabling auto-discovery mode..."
            export CMS_CONTEST_ID="auto"
            ;;
        "manual")
            print_color $BLUE "Enabling manual selection mode..."
            export CMS_CONTEST_ID="manual"
            ;;
        [0-9]*)
            # Validate contest exists
            local contest_info
            contest_info=$(get_contest_by_id "$target")
            if [ -n "$contest_info" ]; then
                print_color $GREEN "Selecting contest ID: $target"
                export CMS_CONTEST_ID="$target"
                echo "$target" > /tmp/cms_current_contest_id
            else
                print_color $RED "Error: Contest ID $target not found"
                return 1
            fi
            ;;
        *)
            print_color $RED "Error: Invalid selection '$target'"
            return 1
            ;;
    esac
    
    # Show updated status
    cmd_current
}

# Refresh contest selection
cmd_refresh() {
    print_color $BLUE "Refreshing contest selection..."
    local new_id
    new_id=$(resolve_contest_id)
    local result=$?
    
    if [ $result -eq 0 ]; then
        print_color $GREEN "Contest refreshed to ID: $new_id"
        echo "$new_id" > /tmp/cms_current_contest_id
        cmd_current
    elif [ $result -eq 2 ]; then
        print_color $YELLOW "Manual selection mode - no auto-refresh"
    else
        print_color $RED "Failed to refresh contest selection"
    fi
}

# Show logs
cmd_logs() {
    local log_file="/opt/cms/log/contest-manager.log"
    
    if [ -f "$log_file" ]; then
        print_color $BLUE "=== Contest Manager Logs ==="
        tail -n 50 "$log_file"
    else
        print_color $YELLOW "No contest manager logs found at $log_file"
    fi
}

# Start monitoring in foreground
cmd_monitor() {
    print_color $BLUE "Starting contest monitoring (Ctrl+C to stop)..."
    monitor_contest_changes
}

# Main command dispatcher
main() {
    local command="${1:-status}"
    
    case "$command" in
        "status")
            cmd_status
            ;;
        "list")
            cmd_list
            ;;
        "current")
            cmd_current
            ;;
        "select")
            cmd_select "$2"
            ;;
        "refresh")
            cmd_refresh
            ;;
        "logs")
            cmd_logs
            ;;
        "monitor")
            cmd_monitor
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_color $RED "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Check if database connection is available
if ! command -v psql >/dev/null 2>&1; then
    print_color $RED "Error: psql command not found. Make sure PostgreSQL client is installed."
    exit 1
fi

# Load environment if available
if [ -f "${script_dir}/../.env" ]; then
    set -a
    source "${script_dir}/../.env"
    set +a
fi

# Run main function
main "$@"
